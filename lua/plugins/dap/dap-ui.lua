return {
  --
  -- "rcarriga/nvim-dap-ui",
  --
  --
  -- config = function() 
  --   require("dapui").setup({
  --     layouts = {
  --       {
  --         elements = {
  --           { id = 'scopes', size = 0.25 },
  --           { id = 'breakpoints', size = 0.25 },
  --           { id = 'stacks', size = 0.25 },
  --           { id = 'watches', size = 0.25 },
  --         },
  --         size = 40,
  --         position = 'left',
  --       },
  --       {
  --         elements = {
  --           { id = 'repl', size = 0.5 },
  --           { id = 'console', size = 0.5 },
  --         },
  --         size = 10,
  --         position = 'bottom',
  --       },
  --     },
  --     floating = {
  --       max_height = nil,  -- These can be integers or a float between 0 and 1.
  --       max_width = nil,   -- Floats will be treated as percentage of your screen.
  --     },
  --     windows = { indent = 1 },
  --     render = {
  --       max_type_length = nil, -- Can be integer or nil.
  --     }
  --   })
  -- end,
  --
  -- -- Keymaps to toggle DAP-UI windows
  -- vim.api.nvim_set_keymap('n', '<space>du', '<cmd>lua require("dapui").toggle()<CR>', { noremap = true, silent = true }),
  -- vim.api.nvim_set_keymap('n', '<space>de', '<cmd>lua require("dapui").float_element("scopes")<CR>', { noremap = true, silent = true }),
  -- vim.api.nvim_set_keymap('n', '<space>db', '<cmd>lua require("dapui").float_element("breakpoints")<CR>', { noremap = true, silent = true }),
  -- -- vim.api.nvim_set_keymap('n', '<space>ds', '<cmd>lua require("dapui").float_element("stacks")<CR>', { noremap = true, silent = true })
  -- vim.api.nvim_set_keymap('n', '<space>dw', '<cmd>lua require("dapui").float_element("watches")<CR>', { noremap = true, silent = true }),
  -- vim.api.nvim_set_keymap('n', '<space>dr', '<cmd>lua require("dapui").float_element("repl")<CR>', { noremap = true, silent = true }),
  -- -- vim.api.nvim_set_keymap('n', '<space>dc', '<cmd>lua require("dapui").float_element("console")<CR>', { noremap = true, silent = true })
  --
  -- -- Automatically open/close DAP-UI when DAP starts/stops
  -- dap.listeners.after.event_initialized["dapui_config"] = function()
  --   dapui.open()
  -- end,
  -- dap.listeners.before.event_terminated["dapui_config"] = function()
  --   dapui.close()
  -- end,
  -- dap.listeners.before.event_exited["dapui_config"] = function()
  --   dapui.close()
  -- end,
}
